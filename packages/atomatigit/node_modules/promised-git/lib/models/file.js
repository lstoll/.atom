(function() {
  var File, Treeish, fs, _;

  _ = require('../lodash');

  fs = require('fs');

  Treeish = require('./treeish');

  File = (function() {
    function File(path, repo, mode) {
      this.path = path;
      this.repo = repo;
      this.mode = mode != null ? mode : '  ';
      if (!_.isPromisedGit(repo)) {
        throw new Error('Invalid repository object');
      } else if (!_.isString(this.path)) {
        throw new Error('Invalid file name');
      }
      this.parseMode();
    }

    File.prototype.update = function(mode) {
      this.mode = mode;
      return this.parseMode();
    };

    File.prototype.parseMode = function() {
      this.modeIndex = this.mode.substring(0, 1);
      return this.modeWorkingTree = this.mode.substring(1, 2);
    };

    File.prototype.isAdded = function() {
      return this.mode.contains('A');
    };

    File.prototype.isCopied = function() {
      return this.mode.contains('C');
    };

    File.prototype.isDeleted = function() {
      return this.mode.contains('D');
    };

    File.prototype.isModified = function() {
      return this.mode.contains('M');
    };

    File.prototype.isRenamed = function() {
      return this.mode.contains('R');
    };

    File.prototype.isStaged = function() {
      return /[ACDMR]/g.test(this.modeIndex);
    };

    File.prototype.isUnstaged = function() {
      return /[ACDMR]/g.test(this.modeWorkingTree);
    };

    File.prototype.isUntracked = function() {
      return this.mode === '??';
    };

    File.prototype.show = function(oid) {
      if (oid == null) {
        oid = 'HEAD';
      }
      if (_.isString(oid.ref)) {
        oid = oid.ref;
      }
      if (_.isString(oid)) {
        return this.repo.show(oid, this.path);
      }
      return Promise.reject(new Error('Invalid oid'));
    };

    return File;

  })();

  module.exports = File;

}).call(this);
