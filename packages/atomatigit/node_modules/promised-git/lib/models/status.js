(function() {
  var File, Status, _,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  _ = require('../lodash');

  File = require('./file');

  Status = (function() {
    var parseBranch, parseFiles, splitLines;

    function Status(raw, repo) {
      this.repo = repo;
      if (!_.isPromisedGit(repo)) {
        throw new Error('Invalid repository object');
      }
      this.parseRaw(raw);
    }

    Status.prototype.parseRaw = function(raw) {
      var lines, _ref;
      lines = splitLines(raw);
      this.branch = parseBranch(lines);
      return _ref = parseFiles(lines, this.repo), this.staged = _ref[0], this.unstaged = _ref[1], this.untracked = _ref[2], _ref;
    };

    splitLines = function(raw) {
      return raw.split(__indexOf.call(raw, '\u0000') >= 0 ? '\u0000' : '\n');
    };

    parseBranch = function(lines) {
      var branch, _ref;
      branch = (_ref = lines[0].substring(3)) != null ? _ref : 'HEAD';
      lines.shift();
      return branch;
    };

    parseFiles = function(lines, repo) {
      var file, line, mode, path, staged, unstaged, untracked, _i, _len;
      staged = [];
      unstaged = [];
      untracked = [];
      for (_i = 0, _len = lines.length; _i < _len; _i++) {
        line = lines[_i];
        if (!(line !== '')) {
          continue;
        }
        mode = line.substring(0, 2);
        path = line.substring(3);
        file = new File(path, repo, mode);
        if (file.isStaged()) {
          staged.push(file);
        }
        if (file.isUnstaged()) {
          unstaged.push(file);
        }
        if (file.isUntracked()) {
          untracked.push(file);
        }
      }
      return [staged, unstaged, untracked];
    };

    return Status;

  })();

  module.exports = Status;

}).call(this);
