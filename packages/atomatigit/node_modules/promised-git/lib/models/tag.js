(function() {
  var Commit, Tag, Treeish,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Commit = require('./commit');

  Treeish = require('./treeish');

  Tag = (function(_super) {
    __extends(Tag, _super);

    function Tag(raw, repo) {
      var hash, ref, _ref;
      _ref = this.parseRaw(raw), hash = _ref[0], ref = _ref[1];
      Tag.__super__.constructor.call(this, ref, repo);
      repo.show(hash, {
        pretty: 'raw'
      }).then((function(_this) {
        return function(commitRaw) {
          return _this.commit = new Commit(commitRaw, _this.repo);
        };
      })(this));
    }

    Tag.prototype.parseRaw = function(raw) {
      var hash, ref, _ref;
      _ref = raw.split(' '), hash = _ref[0], ref = _ref[1];
      ref = ref.split('refs/tags/')[1];
      return [hash, ref];
    };

    return Tag;

  })(Treeish);

  module.exports = Tag;

}).call(this);
