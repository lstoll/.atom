(function() {
  var Diff, File, Promise, Treeish, _;

  _ = require('../lodash');

  Promise = require('bluebird');

  Diff = require('./diff');

  File = require('./file');

  Treeish = (function() {
    var GIT_ROOT_COMMIT;

    GIT_ROOT_COMMIT = '4b825dc642cb6eb9a060e54bf8d69288fbee4904';

    function Treeish(ref, repo) {
      this.ref = ref;
      this.repo = repo;
      if (!_.isString(ref)) {
        throw new Error('Invalid ref');
      }
      if (!_.isPromisedGit(repo)) {
        throw new Error('Invalid repository object');
      }
    }

    Treeish.prototype.checkout = function(options) {
      if (options == null) {
        options = {};
      }
      return this.repo.checkout(this.ref, options);
    };

    Treeish.prototype.diff = function(options) {
      if (options == null) {
        options = {};
      }
      return this.repo.cmd('diff', options, "" + this.ref + "~.." + this.ref)["catch"]((function(_this) {
        return function() {
          return _this.repo.cmd('diff', options, "" + GIT_ROOT_COMMIT + ".." + _this.ref);
        };
      })(this)).then(function(raw) {
        return new Diff(null, raw);
      });
    };

    Treeish.prototype.diffTo = function(oid, options) {
      var _ref;
      if (oid == null) {
        oid = 'HEAD';
      }
      if (options == null) {
        options = {};
      }
      if (_.isTreeish(oid)) {
        oid = oid.ref;
      } else if (_.isPlainObject(oid)) {
        _ref = [oid, 'HEAD'], options = _ref[0], oid = _ref[1];
      }
      options = _.extend(options, {
        treeish: "" + this.ref + ".." + oid
      });
      if (_.isString(oid)) {
        return this.repo.getDiff(options);
      }
      return Promise.reject(new Error('Invalid oid'));
    };

    Treeish.prototype.diffFrom = function(oid, options) {
      var _ref;
      if (oid == null) {
        oid = 'HEAD';
      }
      if (options == null) {
        options = {};
      }
      if (_.isTreeish(oid)) {
        oid = oid.ref;
      } else if (_.isPlainObject(oid)) {
        _ref = [oid, 'HEAD'], options = _ref[0], oid = _ref[1];
      }
      options = _.extend(options, {
        treeish: "" + oid + ".." + this.ref
      });
      if (_.isString(oid)) {
        return this.repo.getDiff(options);
      }
      return Promise.reject(new Error('Invalid oid'));
    };

    Treeish.prototype.showFile = function(file) {
      if (_.isFile(file)) {
        return file.show(this.ref);
      }
      if (_.isString(file)) {
        return this.repo.show(this.ref, file);
      }
      return Promise.reject(new Error('Invalid file'));
    };

    Treeish.prototype.reset = function(mode) {
      var options;
      options = {};
      if (_.isString(mode)) {
        options[mode] = true;
      }
      return this.repo.cmd('reset', options, this.ref);
    };

    return Treeish;

  })();

  module.exports = Treeish;

}).call(this);
