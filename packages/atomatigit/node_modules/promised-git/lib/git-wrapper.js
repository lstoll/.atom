(function() {
  var GitWrapper, Promise, exec, fs, _,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  _ = require('./lodash');

  fs = require('fs');

  Promise = require('bluebird');

  exec = require('child_process').exec;

  GitWrapper = (function() {
    var args_to_argv, escapeShellArg, options_to_argv;

    function GitWrapper() {}

    GitWrapper.cmd = function(command, options, args, cwd) {
      var _ref, _ref1;
      if (_.isArray(options) || _.isString(options)) {
        _ref = [options, args], args = _ref[0], cwd = _ref[1];
      }
      if (!fs.existsSync(cwd) && fs.existsSync(args)) {
        _ref1 = [args, null], cwd = _ref1[0], args = _ref1[1];
      } else if (!fs.existsSync(cwd)) {
        throw new Error("'" + cwd + "' is no valid repository path!");
      }
      args = args_to_argv(args);
      options = options_to_argv(options);
      command = "" + command + " " + options + " " + args;
      if (command.substring(0, 4) !== 'git ') {
        command = 'git ' + command;
      }
      return new Promise(function(resolve, reject) {
        return exec(command, {
          cwd: cwd,
          maxBuffer: 100 * 1024 * 1024
        }, function(error, stdout, stderr) {
          if (error) {
            error.message = stderr;
            return reject(error);
          } else {
            return resolve(stdout);
          }
        });
      });
    };

    options_to_argv = function(options) {
      var argv, key, treeish, val;
      if (options == null) {
        options = {};
      }
      argv = [];
      treeish = null;
      for (key in options) {
        val = options[key];
        if (key === 'treeish') {
          treeish = val;
        } else if (key.length === 1) {
          if (!_.isBoolean(val)) {
            argv.push("-" + key + " " + (escapeShellArg(val)));
          }
          if (val === true) {
            argv.push("-" + key);
          }
        } else {
          if (!_.isBoolean(val)) {
            argv.push("--" + key + "=" + (escapeShellArg(val)));
          }
          if (val === true) {
            argv.push("--" + key);
          }
        }
      }
      if (treeish) {
        argv.push(treeish, '--');
      }
      return argv.join(' ');
    };

    args_to_argv = function(args) {
      var arg, argv;
      if (args == null) {
        args = [];
      }
      if (_.isArray(args)) {
        argv = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = args.length; _i < _len; _i++) {
            arg = args[_i];
            _results.push(escapeShellArg(arg));
          }
          return _results;
        })();
        return argv.join(' ');
      } else if (_.isString(args)) {
        return escapeShellArg(args);
      } else {
        return '';
      }
    };

    escapeShellArg = function(cmd) {
      if (_.isString(cmd)) {
        cmd = cmd.trim();
        if (__indexOf.call(cmd, ' ') >= 0 || __indexOf.call(cmd, '"') >= 0) {
          return '\"' + cmd.replace(/\"/g, '"\\""') + '\"';
        } else {
          return cmd;
        }
      } else if (_.isNumber(cmd)) {
        return cmd;
      } else {
        return '';
      }
    };

    return GitWrapper;

  })();

  module.exports = GitWrapper.cmd;

}).call(this);
